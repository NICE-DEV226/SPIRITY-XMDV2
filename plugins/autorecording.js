import config from '../config.cjs';

const autorecordingCommand = async (m, Matrix) => {
  const botNumber = await Matrix.decodeJid(Matrix.user.id);
  const isCreator = [botNumber, config.OWNER_NUMBER + '@s.whatsapp.net'].includes(m.sender);
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(' ')[0].toLowerCase() : '';
  const text = m.body.slice(prefix.length + cmd.length).trim();

  if (cmd === 'autorecording') {
    if (!isCreator) {
      return m.reply("‚ùå Cette commande est r√©serv√©e au propri√©taire.");
    }

    let responseMessage;

    if (text === 'on') {
      config.AUTO_RECORDING = true;
      responseMessage = "‚úÖ Auto-Recording a √©t√© activ√©.";
    } else if (text === 'off') {
      config.AUTO_RECORDING = false;
      responseMessage = "‚ö†Ô∏è Auto-Recording a √©t√© d√©sactiv√©.";
    } else {
      responseMessage = `üéôÔ∏è Utilisation :
‚Ä¢ \`${prefix}autorecording on\` : Active Auto-Recording
‚Ä¢ \`${prefix}autorecording off\` : D√©sactive Auto-Recording`;
    }

    try {
      await Matrix.sendMessage(m.from, { text: responseMessage }, { quoted: m });
    } catch (error) {
      console.error("‚ùå Erreur lors du traitement de la commande :", error);
      await Matrix.sendMessage(m.from, { text: '‚ö†Ô∏è Une erreur est survenue lors du traitement de la commande.' }, { quoted: m });
    }
  }
};

export default autorecordingCommand;
